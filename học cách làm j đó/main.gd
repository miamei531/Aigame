extends Node2D
@onready var bgms = $AudioStreamPlayer2D
@onready var hd = $AudioStreamPlayer
@onready var player = $player/player
@onready var platform = $StaticBody2D
@onready var safe_zone = $Area2D3
@onready var boxes = [$Sprite2D,$Sprite2D2 , $Sprite2D3]
@onready var answer_box = $Sprite2D4
@onready var clock = $diem
@onready var sound_red = $do
@onready var sound_blue = $xanhduon
@onready var sound_white = $trang
@onready var sound_correct = $khen # √¢m thanh khuy·∫øn kh√≠ch
@onready var sound_wrong = $sai    # √¢m thanh c·ªï v≈©
var last_correct_color: Color = Color(0, 0, 0)  # ban ƒë·∫ßu l√† m√†u b·∫•t k·ª≥ kh√¥ng c√≥ trong danh s√°ch
var can_countdown := false  
var timer := 15.0
var platform_gone := false
var safe_positions = [300, 550, 800]
var safe_x := 0
var box_positions = [Vector2(304, 464), Vector2(544, 464), Vector2(784, 464)]  # c√°c v·ªã tr√≠ ho√°n ƒë·ªïi
var colors = [Color.RED, Color.BLUE, Color.WHITE]
var correct_color: Color
var game_running := true
func _ready():
	up_date_music_start()
	safe_x = safe_positions[randi() % safe_positions.size()]
	safe_zone.position.x = safe_x
	print("Safe zone at:", safe_x)
	randomize()
	start_game()

func _process(delta):
	if not game_running or not can_countdown:
		return

	timer -= delta
	$diem.text = str(round(timer))  # ‚úÖ C·∫≠p nh·∫≠t Label th·ªùi gian

	if timer <= 0 or Input.is_action_just_pressed("ui_accept") and game_running:
		end_round()
		await get_tree().create_timer(1).timeout
		start_new_round()
	if platform_gone:
		return

	#timer -= delta

	if timer <= 0:
		var player_x = player.position.x  # Kh√¥ng c·∫ßn d√πng global_position ·ªü ƒë√¢y n·∫øu c√πng h·ªá t·ªça ƒë·ªô
		print("Player ƒëang ·ªü:", player_x, "| Safe zone t·∫°i:", safe_x)

		if abs(player_x - safe_x) <= 10:
			await get_tree().create_timer(1).timeout
			print("‚úÖ B·∫°n an to√†n!")
			$Dungr.visible = true
			print ($Dungr.visible )
			await get_tree().create_timer(1).timeout
			
			
		else:
			platform.queue_free()
			platform = null
			print("‚ùå B·∫°n ƒë√£ r∆°i xu·ªëng!")

		platform_gone = true
func start_new_round():
	timer = 15.0
	game_running = true
	platform_gone = false
	# Reset l·∫°i ƒë·ªìng h·ªì
	#clock.reset_timer()
	# Reset l·∫°i n·ªÅn n·∫øu b·ªã x√≥a
	if platform == null:
		var new_platform = preload("res://lv/static_body_2d.tscn").instantiate()
		add_child(new_platform)
		new_platform.position = Vector2(504, 352)
		platform = new_platform

	# ‚úÖ Reset v·ªã tr√≠ v√† tr·∫°ng th√°i nh√¢n v·∫≠t
	player.position = Vector2(50, 296)
	player.velocity = Vector2.ZERO
	player.set_physics_process(true)
	# C·∫≠p nh·∫≠t ch·ªâ s·ªë v·ªã tr√≠ t∆∞∆°ng ·ª©ng
	player.current_pos_index = 0

	# Ho√°n ƒë·ªïi box
	box_positions.shuffle()
	for i in range(3):
		boxes[i].position = box_positions[i]

	# G√°n m√†u
	colors.shuffle()
	for i in range(3):
		boxes[i].modulate = colors[i]

	
	# ‚úÖ Ch·ªçn m√†u ƒë√∫ng v√† c·∫≠p nh·∫≠t safe zone kh·ªõp box ƒë√∫ng m√†u
	while true:
		correct_color = colors[randi() % 3]
		answer_box.modulate = correct_color
		if correct_color != last_correct_color:
			break  # n·∫øu kh√°c m√†u c≈© th√¨ ch·∫•p nh·∫≠n
	# l∆∞u l·∫°i m√†u n√†y cho v√≤ng sau
	last_correct_color = correct_color

	for i in range(3):
		if boxes[i].modulate == correct_color:
			safe_x = boxes[i].position.x
			break

	safe_zone.position.x = safe_x
	print("üü® M√†u ƒë√∫ng l√†:", correct_color, "| Safe zone t·∫°i:", safe_x)
	match correct_color:
		Color.RED:
			sound_red.play()
		Color.BLUE:
			sound_blue.play()
		Color.WHITE:
			sound_white.play()

	await get_tree().create_timer(1.5).timeout  # Ch·ªù √¢m thanh ph√°t xong tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu ch∆°i
	can_countdown = true  # Cho ph√©p ƒë·∫øm ng∆∞·ª£c
func end_round():
	game_running = false
	
	var player_x = player.position.x
	var closest_box = get_closest_box(player_x)
	if closest_box.modulate == correct_color:
		print("‚úÖ B·∫°n an to√†n!")
		$Dungr.visible = true
		sound_correct.play()  # ‚úÖ √Çm thanh khuy·∫øn kh√≠ch
		await get_tree().create_timer(1).timeout
		$Dungr.visible = false
	else:
		print("‚ùå Sai r·ªìi, r∆°i xu·ªëng!")
		platform.queue_free()
		$Sai.visible = true
		sound_wrong.play()  # ‚úÖ √Çm thanh c·ªï v≈©
		await get_tree().create_timer(1).timeout
		$Sai.visible = false
	
	platform_gone = true
	
func get_closest_box(player_x: float) -> Sprite2D:
	var closest: Sprite2D = boxes[0]
	var min_dist: float = abs(boxes[0].position.x - player_x)

	for box in boxes:
		var dist = abs(box.position.x - player_x)
		if dist < min_dist:
			min_dist = dist
			closest = box

	return closest
func up_date_music_start():
	if !bgms.playing :
		bgms.play()
		print("nh·∫°c ch·∫°y")
func start_game():
	# B·∫Øt ƒë·∫ßu ph√°t nh·∫°c h∆∞·ªõng d·∫´n
	hd.play()
	await hd.finished  # ƒê·ª£i nh·∫°c ph√°t xong
	print("üîä Nh·∫°c ƒë√£ ph√°t xong. B·∫Øt ƒë·∫ßu tr√≤ ch∆°i.")
	can_countdown = true  # ‚úÖ Cho ph√©p b·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c
	start_new_round()
